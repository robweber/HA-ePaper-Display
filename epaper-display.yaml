esphome:
  name: bedside_display
  platform: ESP8266
  board: nodemcuv2
  on_boot:
    priority: -10
    then:
      - delay: 20s
      - component.update: epaperdisplay

wifi:
  ssid: ""
  password: ""

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bedside Display Fallback Hotspot"
    password: ""

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

# get time from home assistant
time:
  - platform: homeassistant
    id: homeassistant_time

# list of sensors
sensor:
  # the wifi signal of the board
  - platform: wifi_signal
    name: 'Wifi Signal Sensor'
    id: wifisignal
    update_interval: 60s
    
  - platform: homeassistant
    entity_id: sensor.thermostat_temperature
    id: thermostat_temp
    
  - platform: homeassistant
    entity_id: sensor.weather_current_temp
    id: outside_temp
    
  - platform: homeassistant
    entity_id: sensor.daily_energy
    id: daily_energy

text_sensor:
  # the next alarm on your phone
  - platform: homeassistant
    entity_id: sensor.rob_next_alarm_time
    id: next_alarm

# list of binary sensors
binary_sensor:
  - platform: homeassistant
    entity_id: binary_sensor.house_secure
    id: house_secure
    on_state:
      then:
        - component.update: epaperdisplay  # update the display when this changes

# load fonts to use - for material icons use hex code
font:
  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_15
    size: 15
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']

  - file: 'fonts/Roboto-Regular.ttf'
    id: roboto_reg_20
    size: 20
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']
       
  - file: 'fonts/Roboto-Medium.ttf'
    id: roboto_med_30
    size: 30
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z','å', 'ä', 'ö', '/','º','µ','³']
  
  - file: 'fonts/Roboto-Bold.ttf'
    id: roboto_bold_60
    size: 60
    glyphs:
      ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '°']

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_wifi
    size: 20
    glyphs: [
      # Wifi
      "\U000F092F", # mdi-wifi-strength-alert-outline
      "\U000F091F", # mdi-wifi-strength-1
      "\U000F0922", # mdi-wifi-strength-2
      "\U000F0925", # mdi-wifi-strength-3
      "\U000F0928", # mdi-wifi-strength-4
      "\U000F00ED", # mdi-calendar
      "\U000F050F" # mdi-thermometer
      ]

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_large
    size: 80
    glyphs: [
      "\U000F033E", # mdi-lock
      "\U000F0FC6"  # mdi-lock-open-variant
      ]

spi:
  clk_pin: 14
  mosi_pin: 13  #DIN

# setup the waveshare display and write the sensor data to it
display:
  - platform: waveshare_epaper
    id: epaperdisplay
    cs_pin: 15
    dc_pin: 12
    update_interval: 600s
    busy_pin: 16
    reset_pin: 4
    model: 4.20in
    lambda: |-
      
      int dateLength = strlen(id(homeassistant_time).now().strftime("%A, %B %d").c_str()) * 8;
      
      // put today's date at the top
      it.print(7, 11, id(mdi_wifi), "\U000F00ED");
      it.strftime(30, 10, id(roboto_reg_20), "%A, %B %d", id(homeassistant_time).now());
      it.filled_rectangle(60 + dateLength, 21, 250, 3);
      
      // check house status, "on" is unlocked
      if(!id(house_secure).state){
        it.print(40, 115, id(mdi_large), TextAlign::BASELINE_LEFT, "\U000F033E");
        it.print(20, 140, id(roboto_reg_20), TextAlign::BASELINE_LEFT, "House Locked");
      }
      else
      {
        it.print(40, 115, id(mdi_large), TextAlign::BASELINE_LEFT, "\U000F0FC6");
        it.print(20, 140, id(roboto_reg_20), TextAlign::BASELINE_LEFT, "House Open");
      }
      
      // show the next alarm time
      it.print(275, 60, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "Next Alarm:");
      it.printf(275, 85, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "%s", id(next_alarm).state.c_str());
      
      it.print(275, 115, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "Daily Energy");
      it.printf(275, 145, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "%.1f kWh", id(daily_energy).state);
      
      //show the weather
      int offsetY = 145;
      it.print(7, 11 + offsetY, id(mdi_wifi), "\U000F050F");
      it.print(30, 10 + offsetY, id(roboto_reg_20), "Weather");
      it.filled_rectangle(115, 22 + offsetY, 300, 3);
      
      //show inside temp
      it.printf(115, 90 + offsetY, id(roboto_bold_60), TextAlign::BASELINE_CENTER, "%.0f°", id(thermostat_temp).state);
      it.print(110, 120 + offsetY, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "Inside");
      
      it.printf(285, 90 + offsetY, id(roboto_bold_60), TextAlign::BASELINE_CENTER, "%.0f°", id(outside_temp).state);
      it.print(280, 120 + offsetY, id(roboto_reg_20), TextAlign::BASELINE_CENTER, "Outside");
      
      /* FOOTER */
      it.strftime(355, 295 , id(roboto_reg_15), TextAlign::BASELINE_RIGHT , "Updated %D %I:%M%P", id(homeassistant_time).now());
      
      /* WiFi Signal Strength */
      if(id(wifisignal).has_state()) {
        int x = 375;
        int y = 295;
        if (id(wifisignal).state >= -50) {
            //Excellent
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F0928");
            ESP_LOGI("WiFi", "Exellent");
        } else if (id(wifisignal).state  >= -60) {
            //Good
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F0925");
            ESP_LOGI("WiFi", "Good");
        } else if (id(wifisignal).state  >= -75) {
            //Fair
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F0922");
            ESP_LOGI("WiFi", "Fair");
        } else if (id(wifisignal).state  >= -100) {
            //Weak
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F091F");
            ESP_LOGI("WiFi", "Weak");
        } else {
            //Unlikely working signal
            it.print(x, y, id(mdi_wifi), TextAlign::BASELINE_CENTER, "\U000F092F");
            ESP_LOGI("WiFi", "Unlikely");
        }
      }